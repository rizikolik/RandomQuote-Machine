{"version":3,"sources":["components/quotes.js","App.js","serviceWorker.js","index.js"],"names":["rgbCreator","red","Math","floor","random","green","blue","concat","QuoteGenerator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","author","color","QuoteCreator","bind","assertThisInitialized","_this2","fetch","then","result","json","quote","body","setState","document","style","background","_this3","react_default","a","createElement","id","className","onClick","href","React","Component","App","components_quotes","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0MAGA,SAASA,IACL,IAAIC,EAAIC,KAAKC,MAAoB,IAAdD,KAAKE,UACpBC,EAAMH,KAAKC,MAAoB,IAAdD,KAAKE,UACtBE,EAAKJ,KAAKC,MAAoB,IAAdD,KAAKE,UAEzB,MAAO,QADA,GAAAG,OAAGN,GAAM,IAAT,GAAAM,OAAgBF,GAAQ,IAAxB,GAAAE,OAA+BD,IACpB,QA+ENE,cA1EZ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAM,CACPC,KAAK,GACLC,OAAO,GACPC,MAAM,IAEVV,EAAKW,aAAaX,EAAKW,aAAaC,KAAlBX,OAAAY,EAAA,EAAAZ,CAAAD,IAPJA,mFAUC,IAAAc,EAAAX,KACfY,MAAK,8BACJC,KAAK,SAACC,GACH,OAAOA,EAAOC,SAEjBF,KAAK,SAACG,GACH,IAAIX,EAAKW,EAAMA,MAAMC,KACjBX,EAAOU,EAAMA,MAAMV,OACvBK,EAAKO,SAAS,CACVb,KAAKA,EACLC,OAAOA,EACPC,MAAMpB,MAGVgC,SAASF,KAAKG,MAAMC,WAAWV,EAAKP,MAAMG,+CAGpC,IAAAe,EAAAtB,KAEXY,MAAK,8BACHC,KAAK,SAACC,GACH,OAAOA,EAAOC,SAEjBF,KAAK,SAACG,GACH,IAAIX,EAAKW,EAAMA,MAAMC,KACjBX,EAAOU,EAAMA,MAAMV,OACvBgB,EAAKJ,SAAS,CACVb,KAAKA,EACLC,OAAOA,EACPC,MAAMpB,MAEVgC,SAASF,KAAKG,MAAMC,WAAWC,EAAKlB,MAAMG,yCAK9C,OAEIgB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aAEJH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QACJH,EAAAC,EAAAC,cAAA,KAAGL,MAAO,CAACb,MAAMP,KAAKI,MAAMG,QAAQgB,EAAAC,EAAAC,cAAA,KAAGE,UAAU,sBAAyB,MAAO3B,KAAKI,MAAMC,OAGhGkB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UACJH,EAAAC,EAAAC,cAAA,KAAGL,MAAO,CAACb,MAAMP,KAAKI,MAAMG,QAA5B,IAAsCP,KAAKI,MAAME,SAMrDiB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACXJ,EAAAC,EAAAC,cAAA,UAAQC,GAAG,YAAYE,QAAS5B,KAAKQ,aAAcY,MAAO,CAACC,WAAWrB,KAAKI,MAAMG,MAAMA,MAAM,UAA7F,aACAgB,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAAcP,MAAO,CAACC,WAAWrB,KAAKI,MAAMG,QAAQgB,EAAAC,EAAAC,cAAA,KAAIC,GAAG,cAAcG,KAAI,+EAAAnC,OAAiFM,KAAKI,MAAMC,KAA5F,OAAAX,OAAuGM,KAAKI,MAAME,SAAUiB,EAAAC,EAAAC,cAAA,KAAGE,UAAU,8BAhE/NG,IAAMC,WCJpBC,MAJf,WACE,OAAOT,EAAAC,EAAAC,cAACQ,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAAStB,SAASuB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.f109d40a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./quotes.css\";\nimport { tsParenthesizedType } from \"@babel/types\";\nfunction rgbCreator(){\n    let red=Math.floor(Math.random()*256);\n    let green=Math.floor(Math.random()*256);\n    let blue=Math.floor(Math.random()*256);\n  let rgb=(`${red}`+\",\"+`${green}`+\",\"+`${blue}`)\n    return \"rgb(\"+rgb+\")\"\n    \n  }\n\nclass QuoteGenerator extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            text:\"\",\n            author:\"\",\n            color:\"\",\n        }\n        this.QuoteCreator=this.QuoteCreator.bind(this)\n        \n    }\n    componentDidMount(){\n        fetch(`https://favqs.com/api/qotd`)\n        .then((result)=>{\n            return result.json()\n        })\n        .then((quote)=>{\n            let text=quote.quote.body\n            let author=quote.quote.author;\n            this.setState({\n                text:text,\n                author:author,\n                color:rgbCreator()\n                \n            })\n            document.body.style.background=this.state.color\n        })\n    }\n    QuoteCreator(){\n       \n       fetch(`https://favqs.com/api/qotd`)\n        .then((result)=>{\n            return result.json()\n        })\n        .then((quote)=>{\n            let text=quote.quote.body\n            let author=quote.quote.author;\n            this.setState({\n                text:text,\n                author:author,\n                color:rgbCreator()\n            })\n            document.body.style.background=this.state.color\n        })\n        \n    }\n    render(){\n        return(\n           \n            <div id=\"quote-box\">\n\n                <div id=\"text\">\n                    <p style={{color:this.state.color}}><i className=\"fas fa-quote-left\"></i>{\"   \"}{this.state.text}</p>\n                   \n                </div>\n                <div id=\"author\">\n                    <p style={{color:this.state.color}}>-{this.state.author}</p>\n\n                    </div>\n               \n                   \n                \n                <div className=\"buttons\">\n                    <button id=\"new-quote\" onClick={this.QuoteCreator} style={{background:this.state.color,color:\"white\"}}>New Quote</button>\n                    <button className=\"tweet-quote\" style={{background:this.state.color}}><a  id=\"tweet-quote\" href={`https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=\"${this.state.text }\"+ ${this.state.author}`}><i className=\"fab fa-twitter\"></i></a></button>\n                </div>\n\n          \n            </div>\n          \n            \n        )\n    }\n   \n}\nexport default (QuoteGenerator);\n","import React from 'react';\nimport QuoteGenerator from '../src/components/quotes.js';\n\n\nfunction App() {\n  return <QuoteGenerator/>\n }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}